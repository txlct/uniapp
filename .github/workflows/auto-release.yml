# workflows which will automatically triggered when event matched
name: GitHub Actions Auto
# on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]
# on: [push]
on:
  push:
    branches: [ finley_v2.0.0-31920210709003_lib_action_auto ]
jobs:
  Auto-Release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup Node ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org'
    
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Get commit message
      - name: Get commit message
        run: |
          COMMIT_MESSAGE=$(git log --format=%s -n 1)
          echo "commitmsg=${COMMIT_MESSAGE}" >> $GITHUB_ENV
      - name: Show commit message
        run : echo "$commitmsg"

      # Before publish
      - name: Install Dependencies
        run: yarn

      - name: Auto run standard-version
        run: yarn version:auto

      # Define ${CURRENT_VERSION}
      - name: Set Current Version
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./package.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

      # Check git tag
      # - name: Tag Check
      #   id: tag_check
      #   shell: bash -ex {0}
      #   run: |
      #     GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
      #     http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
      #       -H "Authorization: token ${GITHUB_TOKEN}")
      #     if [ "$http_status_code" -ne "404" ] ; then
      #       echo "::set-output name=exists_tag::true"
      #     else
      #       echo "::set-output name=exists_tag::false"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create git tag
      # - name: Create Git Tag
      #   if: steps.tag_check.outputs.exists_tag == 'false'
      #   uses: azu/action-package-version-to-git-tag@v1
      #   with:
      #     version: ${{ env.CURRENT_VERSION }}
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     github_repo: ${{ github.repository }}
      #     git_commit_sha: ${{ github.sha }}
      #     git_tag_prefix: "v"

      # After publish
      - name: Create Release
        id: create_release
        # if: steps.tag_check.outputs.exists_tag == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false
